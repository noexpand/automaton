[
  {
    "name":"MutationType",
    "description":null,
    "fieldDocs":[
      {
        "name":"deleteDomainObject",
        "description":"Deletes the domain object of the given type and with the given id.",
        "paramDocs":[
          {
            "name":"type",
            "description":"domain type name"
          },
          {
            "name":"id",
            "description":"domain object id to delete"
          },
          {
            "name":"cascade",
            "description":"optional list of relations to follow when deleting the object"
          }
        ]
      },
      {
        "name":"generateDomainObjectId",
        "description":"Generate a new domain object id using the application specific IdGenerator implementation.",
        "paramDocs":[
          {
            "name":"domainType",
            "description":"Domain type to generate an id for."
          },
          {
            "name":"count",
            "description":""
          }
        ]
      },
      {
        "name":"persistWorkingSet",
        "description":"Server-side end-point for WorkingSet.persist()",
        "paramDocs":[
          {
            "name":"domainObjects",
            "description":"List of new and changed domain objects"
          },
          {
            "name":"deletions",
            "description":"List of object deletions"
          }
        ]
      },
      {
        "name":"storeDomainObject",
        "description":"Stores a single domain object of any type. Note that you might have to manually register an input type.",
        "paramDocs":[
          {
            "name":"domainObject",
            "description":"domain object wrapped as DomainObject scalar"
          }
        ]
      },
      {
        "name":"storeDomainObjects",
        "description":"Stores a list of domain object of any type. Note that you might have to manually register an input type.",
        "paramDocs":[
          {
            "name":"domainObjects",
            "description":"list of domain object wrapped as DomainObject scalar"
          }
        ]
      },
      {
        "name":"updateAssociations",
        "description":"Updates the associations of one source domain object over a many-to-many connection / an associative entity",
        "paramDocs":[
          {
            "name":"domainType",
            "description":"associative domain type / link table"
          },
          {
            "name":"leftSideRelation",
            "description":"The relation over which the source domain type is connected with the associative\n                             domain type / link table"
          },
          {
            "name":"sourceIds",
            "description":"Id-values of the current source object (all source id fields must contains this value)"
          },
          {
            "name":"domainObjects",
            "description":"Current list of instances that might contain place holder ids."
          }
        ]
      }
    ]
  },
  {
    "name":"AutomatonApplication",
    "description":"Root model of the application models.",
    "fieldDocs":[
      
    ]
  },
  {
    "name":"ColumnState",
    "description":"The state of a column within an interactive query.",
    "fieldDocs":[
      {
        "name":"name",
        "description":"Column name",
        "paramDocs":[
          
        ]
      },
      {
        "name":"sortable",
        "description":"True if the column is sortable.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"enabled",
        "description":"True if column is enabled. Server might disabled columns.",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"Configuration",
    "description":"Root model of the application models.",
    "fieldDocs":[
      
    ]
  },
  {
    "name":"IncomingMessage",
    "description":"Container for incoming messages.",
    "fieldDocs":[
      
    ]
  },
  {
    "name":"InteractiveQuery",
    "description":"Interactive Query with [T] payload.",
    "fieldDocs":[
      {
        "name":"queryConfig",
        "description":"Query configuration the current result was produced with.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"columnStates",
        "description":"Column states for the current result.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"rowCount",
        "description":"Total row count available.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"type",
        "description":"Name of payload type (always '[T]')",
        "paramDocs":[
          
        ]
      },
      {
        "name":"rows",
        "description":"List with current rows of [T].",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"ModuleFunctionReferences",
    "description":"Encapsulates the detected static function calls within one module.",
    "fieldDocs":[
      {
        "name":"module",
        "description":"Module name (without leading \"./\")",
        "paramDocs":[
          
        ]
      },
      {
        "name":"requires",
        "description":"Map of variable names mapping to",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"NamedModel",
    "description":"Container model that has a unique name.",
    "fieldDocs":[
      
    ]
  },
  {
    "name":"OutgoingMessage",
    "description":"Container for outgoing messages.",
    "fieldDocs":[
      
    ]
  },
  {
    "name":"OutgoingMessageType",
    "description":"Encapsulates the outgoing message types used internally in automaton. You can use any unique type for your application\nif your server and client side agree on it.",
    "fieldDocs":[
      
    ]
  },
  {
    "name":"Process",
    "description":null,
    "fieldDocs":[
      {
        "name":"inputType",
        "description":"GraphQL type to use as input type. For root processes these inputs are mapped by name from the HTTP parameters,\nfor sub-processes, the sub-process state",
        "paramDocs":[
          
        ]
      },
      {
        "name":"resultType",
        "description":"GraphQL type to use as result type when using this process as sub process. A sub-process must have an result type,\na normal process usually doesn't need one.",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"QueryConfig",
    "description":"Encapsulates all parameters of an interactive query.",
    "fieldDocs":[
      {
        "name":"condition",
        "description":"FilterDSL condition graph or null",
        "paramDocs":[
          
        ]
      },
      {
        "name":"pageSize",
        "description":"Maximum number of paginated results.,",
        "paramDocs":[
          
        ]
      },
      {
        "name":"sortFields",
        "description":"Current sort order for the query.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"id",
        "description":"Optional unique query identifier. Useful for server-side query implementations.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"currentPage",
        "description":"Current page within the paginated results",
        "paramDocs":[
          
        ]
      }
    ]
  },
  {
    "name":"StaticFunctionReferences",
    "description":"Encapsulates the information contained within a <code>track-usage.json<\/code> file on the java side.\n\nIt contains the results of JavaScript code analysis that detects statically analyzable calls within the application\nreact components and other modules.",
    "fieldDocs":[
      
    ]
  },
  {
    "name":"ViewDeclaration",
    "description":"A named constant within a view.",
    "fieldDocs":[
      
    ]
  },
  {
    "name":"WorkingSetDeletion",
    "description":"Encapsulates the type and id of on object deletion in a working set.",
    "fieldDocs":[
      {
        "name":"id",
        "description":"Id of deleted object as generic scalar.",
        "paramDocs":[
          
        ]
      },
      {
        "name":"type",
        "description":"Domain type of deleted object",
        "paramDocs":[
          
        ]
      }
    ]
  }
]