/*
 * This file is generated by jOOQ.
*/
package de.quinscape.automaton.testdomain;


import de.quinscape.automaton.testdomain.tables.AppUser;
import de.quinscape.automaton.testdomain.tables.Baz;
import de.quinscape.automaton.testdomain.tables.BazLink;
import de.quinscape.automaton.testdomain.tables.BazValue;
import de.quinscape.automaton.testdomain.tables.Foo;
import de.quinscape.automaton.testdomain.tables.FooType;
import de.quinscape.automaton.testdomain.tables.Node;
import de.quinscape.automaton.testdomain.tables.records.AppUserRecord;
import de.quinscape.automaton.testdomain.tables.records.BazLinkRecord;
import de.quinscape.automaton.testdomain.tables.records.BazRecord;
import de.quinscape.automaton.testdomain.tables.records.BazValueRecord;
import de.quinscape.automaton.testdomain.tables.records.FooRecord;
import de.quinscape.automaton.testdomain.tables.records.FooTypeRecord;
import de.quinscape.automaton.testdomain.tables.records.NodeRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>public</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AppUserRecord> PK_APP_USER = UniqueKeys0.PK_APP_USER;
    public static final UniqueKey<AppUserRecord> UC_APP_USER_LOGIN = UniqueKeys0.UC_APP_USER_LOGIN;
    public static final UniqueKey<BazRecord> PK_BAZ = UniqueKeys0.PK_BAZ;
    public static final UniqueKey<BazLinkRecord> PK_BAZ_LINK = UniqueKeys0.PK_BAZ_LINK;
    public static final UniqueKey<BazLinkRecord> BAZ_LINK_BAZ_ID_VALUE_ID_KEY = UniqueKeys0.BAZ_LINK_BAZ_ID_VALUE_ID_KEY;
    public static final UniqueKey<BazValueRecord> PK_BAZ_VALUE = UniqueKeys0.PK_BAZ_VALUE;
    public static final UniqueKey<FooRecord> PK_FOO = UniqueKeys0.PK_FOO;
    public static final UniqueKey<FooTypeRecord> PK_FOO_TYPE = UniqueKeys0.PK_FOO_TYPE;
    public static final UniqueKey<FooTypeRecord> FOO_TYPE_NAME_KEY = UniqueKeys0.FOO_TYPE_NAME_KEY;
    public static final UniqueKey<NodeRecord> PK_NODE = UniqueKeys0.PK_NODE;
    public static final UniqueKey<NodeRecord> UC_NODE_NAME = UniqueKeys0.UC_NODE_NAME;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BazRecord, AppUserRecord> BAZ__FK_BAZ_OWNER_ID = ForeignKeys0.BAZ__FK_BAZ_OWNER_ID;
    public static final ForeignKey<BazLinkRecord, BazRecord> BAZ_LINK__FK_BAZ_LINK_BAZ_ID = ForeignKeys0.BAZ_LINK__FK_BAZ_LINK_BAZ_ID;
    public static final ForeignKey<BazLinkRecord, BazValueRecord> BAZ_LINK__FK_BAZ_LINK_VALUE_ID = ForeignKeys0.BAZ_LINK__FK_BAZ_LINK_VALUE_ID;
    public static final ForeignKey<FooRecord, FooTypeRecord> FOO__FK_FOO_TYPE_ID = ForeignKeys0.FOO__FK_FOO_TYPE_ID;
    public static final ForeignKey<FooRecord, AppUserRecord> FOO__FK_FOO_OWNER_ID = ForeignKeys0.FOO__FK_FOO_OWNER_ID;
    public static final ForeignKey<NodeRecord, NodeRecord> NODE__FK_NODE_PARENT_ID = ForeignKeys0.NODE__FK_NODE_PARENT_ID;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class UniqueKeys0 {
        public static final UniqueKey<AppUserRecord> PK_APP_USER = Internal.createUniqueKey(AppUser.APP_USER, "pk_app_user", AppUser.APP_USER.ID);
        public static final UniqueKey<AppUserRecord> UC_APP_USER_LOGIN = Internal.createUniqueKey(AppUser.APP_USER, "uc_app_user_login", AppUser.APP_USER.LOGIN);
        public static final UniqueKey<BazRecord> PK_BAZ = Internal.createUniqueKey(Baz.BAZ, "pk_baz", Baz.BAZ.ID);
        public static final UniqueKey<BazLinkRecord> PK_BAZ_LINK = Internal.createUniqueKey(BazLink.BAZ_LINK, "pk_baz_link", BazLink.BAZ_LINK.ID);
        public static final UniqueKey<BazLinkRecord> BAZ_LINK_BAZ_ID_VALUE_ID_KEY = Internal.createUniqueKey(BazLink.BAZ_LINK, "baz_link_baz_id_value_id_key", BazLink.BAZ_LINK.BAZ_ID, BazLink.BAZ_LINK.VALUE_ID);
        public static final UniqueKey<BazValueRecord> PK_BAZ_VALUE = Internal.createUniqueKey(BazValue.BAZ_VALUE, "pk_baz_value", BazValue.BAZ_VALUE.ID);
        public static final UniqueKey<FooRecord> PK_FOO = Internal.createUniqueKey(Foo.FOO, "pk_foo", Foo.FOO.ID);
        public static final UniqueKey<FooTypeRecord> PK_FOO_TYPE = Internal.createUniqueKey(FooType.FOO_TYPE, "pk_foo_type", FooType.FOO_TYPE.ORDINAL);
        public static final UniqueKey<FooTypeRecord> FOO_TYPE_NAME_KEY = Internal.createUniqueKey(FooType.FOO_TYPE, "foo_type_name_key", FooType.FOO_TYPE.NAME);
        public static final UniqueKey<NodeRecord> PK_NODE = Internal.createUniqueKey(Node.NODE, "pk_node", Node.NODE.ID);
        public static final UniqueKey<NodeRecord> UC_NODE_NAME = Internal.createUniqueKey(Node.NODE, "uc_node_name", Node.NODE.NAME);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<BazRecord, AppUserRecord> BAZ__FK_BAZ_OWNER_ID = Internal.createForeignKey(de.quinscape.automaton.testdomain.Keys.PK_APP_USER, Baz.BAZ, "baz__fk_baz_owner_id", Baz.BAZ.OWNER_ID);
        public static final ForeignKey<BazLinkRecord, BazRecord> BAZ_LINK__FK_BAZ_LINK_BAZ_ID = Internal.createForeignKey(de.quinscape.automaton.testdomain.Keys.PK_BAZ, BazLink.BAZ_LINK, "baz_link__fk_baz_link_baz_id", BazLink.BAZ_LINK.BAZ_ID);
        public static final ForeignKey<BazLinkRecord, BazValueRecord> BAZ_LINK__FK_BAZ_LINK_VALUE_ID = Internal.createForeignKey(de.quinscape.automaton.testdomain.Keys.PK_BAZ_VALUE, BazLink.BAZ_LINK, "baz_link__fk_baz_link_value_id", BazLink.BAZ_LINK.VALUE_ID);
        public static final ForeignKey<FooRecord, FooTypeRecord> FOO__FK_FOO_TYPE_ID = Internal.createForeignKey(de.quinscape.automaton.testdomain.Keys.FOO_TYPE_NAME_KEY, Foo.FOO, "foo__fk_foo_type_id", Foo.FOO.TYPE);
        public static final ForeignKey<FooRecord, AppUserRecord> FOO__FK_FOO_OWNER_ID = Internal.createForeignKey(de.quinscape.automaton.testdomain.Keys.PK_APP_USER, Foo.FOO, "foo__fk_foo_owner_id", Foo.FOO.OWNER_ID);
        public static final ForeignKey<NodeRecord, NodeRecord> NODE__FK_NODE_PARENT_ID = Internal.createForeignKey(de.quinscape.automaton.testdomain.Keys.PK_NODE, Node.NODE, "node__fk_node_parent_id", Node.NODE.PARENT_ID);
    }
}
